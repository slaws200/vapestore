import React, { useRef, useState } from 'react';
import './Tabs.css';
import { Category } from '@components/app/App';

interface TabsProps {
    onTabChange: (query: Category) => void;
    categories: Category[] | string[];
}

const Tabs: React.FC<TabsProps> = ({ onTabChange, categories }) => {
    const [activeTab, setActiveTab] = useState<string>(categories[0]); // –ü–µ—Ä–≤—ã–π —Ç–∞–± –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const wrapperRef = useRef<HTMLDivElement>(null);
    let startX = 0;
    let scrollLeft = 0;

    const handleTabChange = (category: string) => {
        setActiveTab(category); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
        onTabChange(category as Category);
    };

    // üñ±Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
    const handleWheelScroll = (event: React.WheelEvent) => {
        if (wrapperRef.current) {
            wrapperRef.current.scrollLeft += event.deltaY; // –°–∫—Ä–æ–ª–ª –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
        }
    };

    // üì± –ù–∞—á–∞–ª–æ —Å–≤–∞–π–ø–∞
    const handleTouchStart = (event: React.TouchEvent) => {
        if (wrapperRef.current) {
            startX = event.touches[0].pageX - wrapperRef.current.offsetLeft;
            scrollLeft = wrapperRef.current.scrollLeft;
        }
    };

    // üì± –î–≤–∏–∂–µ–Ω–∏–µ —Å–≤–∞–π–ø–∞
    const handleTouchMove = (event: React.TouchEvent) => {
        if (wrapperRef.current) {
            const x = event.touches[0].pageX - wrapperRef.current.offsetLeft;
            const walk = (x - startX) * 1.5; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            wrapperRef.current.scrollLeft = scrollLeft - walk;
        }
    };

    return (
        <div
            className="tabs-wrapper"
            ref={wrapperRef}
            onWheel={handleWheelScroll}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
        >
            {categories.map((category) => (
                <div
                    className={`tab ${activeTab === category ? 'active' : ''}`} // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
                    onClick={() => handleTabChange(category)}
                    key={category}
                >
                    {category.toLocaleUpperCase()}
                </div>
            ))}
        </div>
    );
};

export default Tabs;
